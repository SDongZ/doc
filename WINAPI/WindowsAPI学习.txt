

WinaMain 获取传递的参数
MFC也可以像控制台那样获取命令行参数：
利用GetCommandLineW()函数获得命令行参数，
利用CommandLineToArgvW()函数解析命令行参数
LPWSTR *szArglist = NULL;   
int nArgs = 0;   
szArglist = CommandLineToArgvW(GetCommandLineW(), &nArgs);   
if( NULL != szArglist)   
{   
//szArglist就是保存参数的数组   
//nArgs是数组中参数的个数   
//数组的第一个元素表示进程的path，也就是szArglist[0]，其他的元素依次是输入参数。   
}   
//取得参数后，释放CommandLineToArgvW申请的空间   
LocalFree(szArglist); 


wchar_t exe_path[MAX_PATH] = {0};
	::GetModuleFileName(GetModuleHandle(NULL), exe_path, MAX_PATH);
	::PathRemoveFileSpecW(exe_path);
    
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
bManualReset [in]
If this parameter is TRUE, the function creates a manual-reset event object, which requires the use of theResetEvent function to set the event state to nonsignaled. If this parameter is FALSE, the function creates an auto-reset event object, and system automatically resets the event state to nonsignaled after a single waiting thread has been released.
---------------------------------------------------------------------------
windows服务，显示托盘图标方法？

1.服务有多种类型,其中一种就是允许与用户交互的.
2.MS也提供了让服务程序创建托盘图标的方法,但要先做一小点事情.
调用RegisterWindowMessage(_T("TaskbarCreated"));
来注册一个系统已经定义好的消息,当系统创建任务栏时会向程序发送这个消息,
程序收到这个消息的时候再创建托盘图标就能显示出来了.
如果是在服务程序一开始就创建托盘图标,这里面任务栏还没有创建完成,当然是显示不了的.
这个办法还是应用程序创建托盘图标，而不是service
需要捕获explorer重启的消息，然后再做一些处理
http://www.flatws.cn/article/program/shell/2011-03-02/15201.html
---------------------------------------------------------------------------
Windows Event(事件)【windows-event.png】

http://msdn.microsoft.com/en-us/library/windows/desktop/aa385780(v=vs.85).aspx
ReportEvent function
Windows event log backends (boost.log lib)

---------------------------------------------------------------------------
Handler Tracking
---------------------------------------------------------------------------
【DirectSound.png】
window 声音组件
http://mark-dot-net.blogspot.com/2008/06/what-up-with-wasapi.html
http://stackoverflow.com/questions/4019733/which-api-should-i-use-for-playing-audio-on-windows
1991 WinMM.dll/mmsys.dll PlaySound
1995 MCIWnd (as suggested by @casablanca)
1996 DirectSound
1998 WaveOut
1999 ASIO
1999 Windows Media Player ActiveX control?
2005 WASAPI (which is used by XAudio2 - as suggested by @Han)
2007 XAudio2
---------------------------------------------------------------------------
【desktop-icon-48x48.png】程序桌面图标，虚的原因是，没有 48x48的图。
---------------------------------------------------------------------------
DragQueryFile
---------------------------------------------------------------------------

http://stackoverflow.com/questions/354902/open-in-explorer
http://forums.codeguru.com/showthread.php?441316-Open-Windows-Explorer-to-Specific-Folder
si.wShowWindow = SW_MINIMIZE;
si.dwFlags |= STARTF_USESHOWWINDOW;
CreateProcess( NULL, _T("explorer.exe C:\\windows"), NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi );
You probably are looking for the ShellExecute() function in shell32.h.
It is called with an "action verb", a path, and optional parameters.
In your case this will want either "open" or "explore" as follows
ShellExecute(NULL, "open", "C:\", NULL, NULL, SW_SHOWDEFAULT);
ShellExecute(NULL, "open", "http://www.google.com", NULL, NULL, SW_SHOWDEFAULT);
---------------------------------------------------------------------------
http://stackoverflow.com/questions/118547/creating-a-zip-file-on-windows-xp-2003-in-c-c
http://www.microsoft-questions.com/microsoft/Platform-SDK-Shell/31056644/using-shfileoperation-to-copy-files-to-a-zip-file.aspx
Windows 7 - Using SHFileOperation to copy files to a zip file
---------------------------------------------------------------------------
WIN7下copyfile返回成功但是文件却没有copy到相应的目录

CopyFile(drive_src_path, L"C:\\Windows\\System32\\drivers\\test.sys", FALSE);
直接复制到
C:\Windows\SysWOW64 去了
如果复制到 system32 这样的目录，由于64、32位的原因可能会被复制到syswow64中去
因为我们的程序是 32-Bit 的，当它调用 CopyFile(...) 和 access(...) 函数时，传给他们的参数里有 System32的路径，就会被 转向到 SysWoW64 目录下
I'm trying to copy a file to C:\windows\system32 by calling CopyFileA - debugging shows that indeed the string "C:\windows\system32\filename" is sent to CopyFileA, but my file is copied to "C:\windows\system32\sysWOW64\filename" instead. Does anyone know why does that happen?
On 64bit Windows, Windows does filesystem redirection for 32bit processes. To disable, callWow64DisableWow64FsRedirection
CopyFile(...)可以正确制文件到磁盘的其他目录，但是就是不能吧文件复制到System32目录下，而且调用结束后它还告诉我TRUE! 实在是想不通了，G一了一把，发现了一些蛛丝马迹: File System Redirector
File System Redirector

indows Server 2003 and Windows XP:  The Sysnative alias was added starting with Windows Vista
在64为系统下，32位程序如果要访问system32，会被wow64自动重定向到syswow64文件夹中。
如果一定要用32位程序访问system32文件夹，请用c:\windows\sysnative
---------------------------------------------------------------------------
string to wstring
What is the difference between WideCharToMultiByte() and wcstombs() When to use which one?
---------------------------------------------------------------------------
VC调试时输出
坚定的 Win32 开发人员可能对 OutputDebugString() API 函数比较熟悉，它可以使你的程序和调试器进行交谈。它要比创建日志文件容易，而且所有“真正的”调试器都能使用它。应用程序和调试器交谈的机制相当简单，而本文将揭示整件事情是如何工作的
---------------------------------------------------------------------------

PathCchRemoveFileSpec function
去掉文件名和最后的 ‘\\’

This function differs from PathRemoveFileSpec in that it accepts paths with "\\", "\\?\" and "\\?\UNC\" prefixes.
---------------------------------------------------------------------------
how to get process handle from process id

OpenProcess(PROCESS_ALL_ACCESS, TRUE, procId);
_In_  DWORD dwProcessId

#include <TlHelp32.h>
#include <boost/algorithm/string.hpp>
bool process_is_running_by_name(const std::wstring & pname) {
        bool bRunning = false;
    HANDLE hSnapShot = CreateToolhelp32Snapshot( TH32CS_SNAPPROCESS,0 );
    PROCESSENTRY32* processInfo = new PROCESSENTRY32;
    processInfo->dwSize = sizeof( PROCESSENTRY32 );
    int index = 0;
    while(Process32Next(hSnapShot,processInfo)!=FALSE) {
                //忽略大小写比较
                if( boost::iequals(pname, processInfo->szExeFile) ) {
                //if ( !pname.compare(processInfo->szExeFile) ){
                        bRunning = true;
        }
    }
    CloseHandle(hSnapShot);
    delete processInfo;
        return bRunning;
}
---------------------------------------------------------------------------
枚举系统字体
EnumFonts
EnumFontFamilies
EnumFontFamiliesEx
To enumerate all the fonts in a device context (HDC 中的所有字体)
enumerate each font in each typeface ()
TrueType fonts are organized around a typeface name (for example, Courier New) and style names (for example, italic, bold, and extra-bold)
The system can simulate([?s?mj??let] 模拟) bold, italic, underline, and strikeout attributes for GDI-supplied raster fonts, but not for device-supplied fonts.

http://www.ucancode.net/faq/Visual-C-Font-Combo-box-with-sample-text-CComboBox.htm
RASTER_FONTTYPE ([ˈræstɚ] 光栅扫描影像) and TRUETYPE_FONTTYPE

BOOL CALLBACK EnumFamCallBack(LPLOGFONT lplf, LPNEWTEXTMETRIC lpntm, DWORD FontType, LPVOID aFontCount)
HDC 对应 字体列表
typeface name
---------------------------------------------------------------------------
#include <shlwapi.h>
PathFileExists  
---------------------------------------------------------------------------
Is there a fairly simple way to redirect stdout and stderr to a text control or other visible place. Ideally, this would not require any recompiles of the third party code.
http://stackoverflow.com/questions/573724/how-can-i-redirect-stdout-to-some-visible-display-in-a-windows-application
int main ()
{
 freopen ("myfile.txt","w",stdout);
 printf ("This sentence is redirected to a file.");
 fclose (stdout);
 return 0;
}
或者 像下面这样调用程序
a.exe > stdout.txt 2> stderr.txt
SetStdHandle function
http://blog.csdn.net/yangjiudan/article/details/697517
GetStdHandle 函数提供一个获得进程相关的标准输入（ STDIN ）、标准输出（ STDOUT ）和标准错误（STDERR ）句柄。在控制台创建过程中，系统创建这些句柄。最初的 STDIN 是一个指向控制台输入缓冲区的句柄， STDOUT 和 STDERR 是控制台活动屏幕缓冲区的句柄
一个进程可以使用 AttachConsole 函数来附着到一个控制台上，一个进程只能附着一个控制台
一般来讲GUI程序不能使用STDIN和STDOUT，但是有时有些特殊需要，希望GUI程序也有控制台，如：一个程序，既可以以GUI方式运行，又可以如果用户在控制台里打程序名的话，就以控制台程序的方式运行
通过AllocConsole() 和 AttachConsole() 这两个WIN API就能实现上面的需求。这两个API分别是在GUI（MFC）程序中分配一个控制台和将程序附着到一个控制台上
http://stackoverflow.com/questions/14990176/attachconsole-from-a-gui-app-when-the-console-is-closed
http://stackoverflow.com/questions/11959643/why-does-closing-a-console-that-was-started-with-allocconsole-cause-my-whole-app
http://bobobobo.wordpress.com/2009/03/01/how-to-attach-a-console-to-your-gui-app-in-c/
        AllocConsole() ;
        AttachConsole( GetCurrentProcessId() ) ;
        freopen( "CON", "w", stdout ) ;
        printf("HELLO!!! I AM THE CONSOLE!" ) ;
void CRecMgr::AttachConsole( void ) {
        ::AllocConsole();
        ::AttachConsole( ::GetCurrentProcessId() );
        freopen( "CON", "w", stdout );
}
---------------------------------------------------------------------------
What is a SAFEARRAY and how do you get information from it?

http://www.purebasic.fr/english/viewtopic.php?p=227926
value List of drive letters and NTFS mount points for the device. Each element of the list is a VARIANT of type VT_BSTR. The bstrVal member of the variant contains the path.
http://www.roblocher.com/whitepapers/oletypes.aspx
you should instead either use the API functions, or much better yet use the helper class CComSafeArray
CComSafeArray is a template class; you provide the type of an element as one of the template parameters.  (The example code in the MSDN documentation forCComSafeArray is lousy, if you ask me.  If you can't figure it out, check out the  ATLSafeArray sample.)
http://blog.csdn.net/tangaowen/article/details/6554640
SAFEARRAY 和 CComSafeArray  的使用
SafeArrayAccessData    将锁计数器加1，并返回数组数据的指针。
SafeArrayAllocData    根据由SafeArrayallocDescriptor 创建的描述符号为一安全数组分配内存。
SafeArrayAllocDiscriptor(Ex)    为安全数组描述符分配内存。
SafeArrayCopy    复制已有的数组。
SafeArrayCopyData    在释放目标资源后将源数组复制到目标数组中。
SafeArrayCreate(Ex)    建立新的数组描述符。
SafeArrayCreateVector(Ex)    建立一个下标为0的一维数组。
SafeArrayDestroy    撤消一个数组描述符。
SafeArrayDestroyData    释放安全数组中的数据元素所使用的内存。
SafeArrayDestroyDescriptor    释放安全数组描述符所使用的内存。
SafeArrayGetDim    返回数组的维数。
SafeArrayGetElement    获得数组的某一元素。
SafeArrayGetElemsize    返回数组某一元素的大小。
SafeArrayGetLBound    获得数组给定维的下限。
SafeArrayGetUBound    获得数组给定维的上限。
SafeArrayLock    将数组锁计数器加1。
SafeArrayPtrOfIndex    返回一指向数组元素的指针。
SafeArrayPutElement    将一元素赋给数组。
SafeArrayRedim    更改数组大小。
SafeArrayUnaccessData    释放一个数组数据指针并将锁计数器减1。
SafeArrayUnlock    将锁计数器减1。
SafeArraySetRecordInfo    设置存储在给定安全数组中的RecordInfo。
SafeArrayGetRecordInfo    取出存储在给定安全数组中的RecordInfo。
SafeArraySetIID    设置给定安全数组接口的GUID值。
SafeArrayGetIID    取出给定安全数组接口的GUID值。
SafeArrayGetVartype    返回存储于给定安全数组中的类型。
http://msdn.microsoft.com/en-us/library/ms221482.aspx
typedef struct FARSTRUCT tagSAFEARRAY {
  unsigned short cDims;       // Count of dimensions in this array. // 数组的维数
  unsigned short fFeatures;   // Flags used by the SafeArray
                       // routines documented below.
#if defined(WIN32)
  unsigned long cbElements;   // Size of an element of the array. 每个元素的大小
                       // Does not include size of
                       // pointed-to data.
  unsigned long cLocks;      // Number of times the array has been 
                       // locked without corresponding unlock.
#else
  unsigned short cbElements;
  unsigned short cLocks;
  unsigned long handle;      // Used on Macintosh only.
#endif
  void HUGEP* pvData;             // Pointer to the data.
  SAFEARRAYBOUND rgsabound[1];      // One bound for each dimension. 上下界指针数组
} SAFEARRAY;
 typedef  struct   tagsSAFEARRAYBOUND
{
           ULONG        cElements;  //当前维度的 元素个数
       LONG           lLbounds;//  下界，开始的下表，比如0
} SAFEARRAYBOUND;
#include "atlsafe.h"
CComSafeArray是ATL对SAFEARRAY结构体的包装，是一个模板类。 SAFEARRAY只能够保存VARIANT内的那些数据一个子集
Detach将所有权从CComSafeArray转移到SAFEARRAY,而Attach正好相反，Attach是将所以权从SAFEARRAY转移到CComSafeArray,这个跟CComVariant相似
atlcomcli.h  CComVariant
bool GetMsftDiscDrive( std::vector<std::wstring> & drives ) {
        HRESULT        hr = S_OK;
        IDiscMaster2*  discMaster = NULL;
        hr = CoCreateInstance(CLSID_MsftDiscMaster2, NULL, CLSCTX_ALL, IID_PPV_ARGS(&discMaster));
        if( discMaster ) {
                LONG cnt = 0;
                discMaster->get_Count( &cnt );
                for( int i = 0; i < cnt; i++ ) {
                        IDiscRecorder2* discRecorder = NULL;
                        hr = CoCreateInstance(CLSID_MsftDiscRecorder2, NULL, CLSCTX_ALL, IID_PPV_ARGS(&discRecorder));
                        if( !discRecorder ) continue;
                        BSTR bstrDeviceName;
                        discMaster->get_Item(i, &bstrDeviceName);
                        if( S_OK != discRecorder->InitializeDiscRecorder( bstrDeviceName ) ) {                                
                                discRecorder->Release();
                                continue;
                        }
                        SAFEARRAY * vlm_path_name;
                        discRecorder->get_VolumePathNames( &vlm_path_name );
                        CComSafeArray<VARIANT> arr( vlm_path_name );
drives.push_back( arr[0].bstrVal );
                        CComVariant var( arr[0] );  
                        drives.push_back( var.bstrVal );
                        discRecorder->Release();
                }
                discMaster->Release();
                return true;
        }
        return false;
}
---------------------------------------------------------------------------
DWORD WINAPI QueryDosDevice(
The device name cannot have a trailing backslash; for example
  _In_opt_  LPCTSTR lpDeviceName,   for example, use "C:", not "C:\"
  _Out_     LPTSTR lpTargetPath,
szName[MAX_PATH];            // 存储 MS-DOS 设备信息
  _In_      DWORD ucchMax
The maximum number of TCHARs that can be stored into the buffer pointed to by lpTargetPath
);
the return value is the number of TCHARs stored into the buffer pointed to by lpTargetPath
        wchar_t buff[256] = { 0 };
        ::GetLogicalDriveStringsW( 255, buff );
        wchar_t * ptr = buff;
        while( *ptr ) {
                if( DRIVE_CDROM == ::GetDriveTypeW( ptr ) ) {
                        wchar_t dos_name[MAX_PATH] = { 0 };
                        wchar_t drive_path[3] = { 0 };
                        wcsncpy_s( drive_path, 3, ptr, 2 );
                        ::QueryDosDeviceW( drive_path, dos_name, MAX_PATH );
                        wchar_t dos_num_char = *( dos_name + wcslen( dos_name ) - 1 );
                        int dos_num = dos_num_char - L'0';
                        cd_letters[dos_num] = drive_path;
                }
                ptr += wcslen( ptr ) + 1;
        }
        if( !cd_letters.size() ) return BURN_ERROR_NORECORDER;
::QueryDosDevice(drive_le, dos_device_name, MAX_PATH);
在Windows NT中，DOS设备名会映射成NT系统设备名
获取的 MS-DOS 设备名为：
B:  \Device\RAMDriv
C:  \Device\HarddiskVolume2
D:  \Device\HarddiskVolume1
E:  \Device\HarddiskVolume3
F:  \Device\CdRom0
X:  \Device\EncryptedDiskVolumeX
BUFSIZE  This size does not include the terminating null character
GetLogicalDriveStrings(BUFSIZE (字符数，不包含), szDevice);
注意这里，-1 ， 是正确的写法，（理解This size does not include the terminating null character）
GetLogicalDriveStrings(BUFSIZE-1, szTemp)
szDevice
A pointer to a buffer that receives a series of null-terminated strings, one for each valid drive in the system, plus with an additional null character. Each string is a device name
the return value is the length, in characters, of the strings copied to the buffer, not including the terminating null character.
C:\
---------------------------------------------------------------------------
Virtual-Key Codes
http://msdn.microsoft.com/en-us/library/dd375731(v=vs.85).aspx
LowLevelKeyboardProc
SetWindowsHookEx
KBDLLHOOKSTRUCT
scan code -> character value -> virtual-key code(区分左右手的值  与  不区分左右手的值)
UINT WINAPI MapVirtualKey(
 _In_  UINT uCode,
 _In_  UINT uMapType
);
uCode is a virtual-key code and is translated into a scan code   MAPVK_VK_TO_VSC 0
uCode is a virtual-key code and is translated into an unshifted character value in the low-order word of the return value   MAPVK_VK_TO_CHAR 1
VK_LSHIFT
VK_RSHIFT                  与 VK_SHIFT
VK_LCONTROL
VK_RCONTROL
VK_LMENU
VK_RMENU
#define VK_SHIFT          0x10
#define VK_CONTROL        0x11
#define VK_MENU           0x12
#define VK_PAUSE          0x13
#define VK_CAPITAL        0x14
鼠标，也可做为虚拟键
VK_LBUTTON
Copies the status of the 256 virtual keys to the specified buffer
BOOL WINAPI GetKeyboardState(
 _Out_  PBYTE lpKeyState
);
When the function returns, each member of the array pointed to by the lpKeyState parameter contains status data for a virtual key. If the high-order bit is 1, the key is down; otherwise, it is up.
SHORT WINAPI GetAsyncKeyState(
 _In_  int vKey
);
Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState
GetAsyncKeyState(VK_LBUTTON)
Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off—alternating each time the key is pressed)
SHORT WINAPI GetKeyState(
 _In_  int nVirtKey
);
Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.
int WINAPI ToUnicodeEx(
 _In_      UINT wVirtKey,
 _In_      UINT wScanCode,
 _In_      const BYTE *lpKeyState,
 _Out_     LPWSTR pwszBuff,
 _In_      int cchBuff,
 _In_      UINT wFlags,
 _In_opt_  HKL dwhkl
);
Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the input locale identifier.
int WINAPI ToAsciiEx(
 _In_      UINT uVirtKey,
 _In_      UINT uScanCode,
 _In_opt_  const BYTE *lpKeyState,
 _Out_     LPWORD lpChar,
 _In_      UINT uFlags,
 _In_opt_  HKL dwhkl
);
BOOL WINAPI RegisterHotKey(
 _In_opt_  HWND hWnd,
 _In_      int id,
 _In_      UINT fsModifiers,
 _In_      UINT vk
);
MOD_ALT MOD_CONTROL MOD_SHIFT MOD_NOREPEAT(不重复改送热键消息) MOD_WIN
When a key is pressed, the system looks for a match against all hot keys. Upon finding a match, the system posts theWM_HOTKEY message to the message queue of the window with which the hot key is associated. If the hot key is not associated with a window, then the WM_HOTKEY message is posted to the thread associated with the hot key.
BOOL WINAPI UnregisterHotKey(
 _In_opt_  HWND hWnd,
 _In_      int id
);
WM_SETHOTKEY 和 RegisterHotKey 有啥区别？
前者,按键会发送WM_SYSCOMMAND消息,后者发送WM_HOTKEY消息

WM_SYSKEYUP alt key
#define VK_MENU           0x12
---------------------------------------------------------------------------
WAV（Waveform Audio Format），是微软与IBM公司所开发的一种声音编码格式，在Windows平台的应用软件受到广泛的支援。[2]由于此音频格式未经过压缩，所以在音质方面不会出现失真的情况，但文件的体积因而在众多音频格式中较为大
http://en.wikipedia.org/wiki/WAV
#pragma pack (push,1)
typedef struct
{
        char                        szRIFF[4];
        long                        lRIFFSize;
        char                        szWave[4];
        char                        szFmt[4];
        long                        lFmtSize;
        WAVEFORMATEX        wfex;
        char                        szData[4];
        long                        lDataSize;
} WAVEHEADER;
#pragma pack (pop)
// Prepare a WAVE file header for the captured data
sprintf(sWaveHeader.szRIFF, "RIFF");
sWaveHeader.lRIFFSize = 0;
sprintf(sWaveHeader.szWave, "WAVE");
sprintf(sWaveHeader.szFmt, "fmt ");
sWaveHeader.lFmtSize = sizeof(WAVEFORMATEX);        
        
sWaveHeader.wfex.nChannels = 1;
sWaveHeader.wfex.wBitsPerSample = 16;
sWaveHeader.wfex.wFormatTag = WAVE_FORMAT_PCM;
sWaveHeader.wfex.nSamplesPerSec = 22050;
sWaveHeader.wfex.nBlockAlign = sWaveHeader.wfex.nChannels * sWaveHeader.wfex.wBitsPerSample / 8;
                
sWaveHeader.wfex.nAvgBytesPerSec = sWaveHeader.wfex.nSamplesPerSec * sWaveHeader.wfex.nBlockAlign;
sWaveHeader.wfex.cbSize = 0;
sprintf(sWaveHeader.szData, "data");
sWaveHeader.lDataSize = 0;
https://ccrma.stanford.edu/courses/422/projects/WaveFormat/
WAVE PCM soundfile format
---------------------------------------------------------------------------
函数功能：翻译加速键表。该函数处理菜单命令中的加速键。
该函数将一个WM_KEYDOWN或WM_SYSKEYDOWN消息翻译成一个WM_COMMAND或WM_SYSCOMMAND消息（如果在给定的加速键表中有该键的入口），然后将WM_COMMAND或WM_SYSCOMMAND消息直接送到相应的窗口处理过程。
TranslateAccelerator直到窗口过程处理完消息后才返回。
函数原型：int TranslateAccelerator（HWND hWnd,HACCEL hAccTable，LPMSG IpMsg）
window message
http://www.autohotkey.com/docs/misc/SendMessageList.htm
---------------------------------------------------------------------------
http://www.codeguru.com/cpp/cpp/cpp_mfc/article.php/c4029/URL-Encoding.htm
http://www.codeguru.com/cpp/cpp/algorithms/strings/article.php/c12759/URI-Encoding-and-Decoding.htm
uri - encode  
uri - decode
问题： 路径中的/需要编码吗？  参数中的 & 需要编码吗？  URL后的 ?号 怎么编码？
---------------------------------------------------------------------------
怎么判断一个进程是否运行?
与一个进程通信，如果不回应，就认为停止 了。
保存 PID 然后打开 HANDLE
获取进程名字 PID
http://stackoverflow.com/questions/4102569/get-process-name-from-process-id-win32
process id 会被重用吗？
http://blogs.msdn.com/b/oldnewthing/archive/2011/01/07/10112755.aspx
#include <TlHelp32.h>
#include <boost/algorithm/string.hpp>
HANDLE process_handle_by_name(const std::wstring & pname) {
        HANDLE handle = 0;
    HANDLE hSnapShot = CreateToolhelp32Snapshot( TH32CS_SNAPPROCESS,0 );
    PROCESSENTRY32* processInfo = new PROCESSENTRY32;
    processInfo->dwSize = sizeof( PROCESSENTRY32 );
    int index = 0;
    while(Process32Next(hSnapShot,processInfo)!=FALSE) {
                //忽略大小写比较
                if( boost::iequals(pname, processInfo->szExeFile) ) {
                //if ( !pname.compare(processInfo->szExeFile) ){
                        handle = ::OpenProcess( PROCESS_ALL_ACCESS, TRUE, processInfo->th32ProcessID );
        }
    }
    CloseHandle(hSnapShot);
    delete processInfo;
        return handle;
}
---------------------------------------------------------------------------
【ShellExecuteExA.png】
从 ShellExecuteExA 运行命令行出现，提示。解决方法：属性-》解除锁定。
---------------------------------------------------------------------------
【CreateProcess-exception.png】
STARTUPINFO si;
PROCESS_INFORMATION pi;
ZeroMemory( &pi, sizeof(pi) );
ZeroMemory( &si, sizeof(si) );
si.cb = sizeof(si);
::CreateProcess( NULL, L"Notepad.exe", NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi);
出现下面的错误:

解决上面的问题的方法，是使用缓存
        wchar_t exe_name[255] = { 0 };
        wcscpy( exe_name, L"Notepad.exe" );
        ::CreateProcess( NULL, exe_name, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi);
::CreateProcess( L"Notepad.exe", NULL, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi);
出错：找不到指定的文件。
::CreateProcess( L"D:\\boost-test\\process\\Debug\\notepad.exe", NULL, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi);
指定全路径就可以了
CreateProcess  的第一个参数 lpApplicationName [in, optional]，注意
The string can specify the full path and file name of the module to execute or it can specify a partial name. In the case of a partial name, the function uses the current drive and current directory to complete the specification. The function will not use the search path. This parameter must include the file name extension; no default extension is assumed.
---------------------------------------------------------------------------

Preventing Logoff or Suspend During a Burn
If proper precautions are not made within an application, it is possible for a user to log off during a burn operation. This leads to the interruption of the burn process, which can result in lost data and possibly render the disc unusable.
To avoid this problem, the application should process the WM_QUERYENDSESSION message which is delivered prior to log off. If the application receives this message while performing a burn operation, return FALSE to cancel the logoff procedure. If the application allows the user to decide whether to continue logging off, a warning should be provided indicating that user will lose data.
Power transitions during the burn process can also create potential problems in the success of a burn activity. Preventing these complications during the burn process requires an application to be aware of when power transitions are about to take place. This is accomplished by by enabling the application to process the WM_POWERBROADCAST message. Applications developed for Windows XP or Windows Server 2003 can return BROADCAST_QUERY_DENY in response to PBT_APMQUERYSUSPEND, preventing Suspend during the burn process.
Due to changes in the Power Management Model for Windows Vista and Windows Server 2008, the PBT_APMQUERYSUSPEND event is no longer delivered to applications. Instead the PBT_APMSUSPEND event is delivered, providing two seconds for an application to prepare for the transition.
As a result of these changes, it is recommended that applications call the SetThreadExecutionState function to prevent a system idle time-out which ordinarily results in the transition to Suspend. It is important to remember that calling this function with the appropriate flags set will only prevent system idle, not an in-progress Suspend.


---------------------------------------------------------------------------


线程的cycles delta属性是什么？【cpu-cycles-delta.png】  CPU周期又称机器周期【cpu-time.png】
[循環差異 (Cycles Delta)] 顯示每一個處理序的執行緒在兩次 Process Explorer 更新之間執行的循環次數。因為 CPU 時間計量仍然是以間隔計時器為基礎，如果您同時新增 [CPU 時間] 欄位，則會看到許多處理序的執行緒耗用數百萬次 CPU 循環，卻仍然未更新其 CPU 時間，且未在 CPU 使用量欄位中顯示出來。
又称机器周期，机器内部各种操作大致可归属为对CPU内部的操作和对主存的操作两大类，由于CPU内部操作速度较快，CPU访问一次内存所花的时间较长，因此用从内存读取一条指令字的最短时间来定义，这个基准时间就是CPU周期（机器周期）。一个指令周期常由若干CPU周期构成
---------------------------------------------------------------------------

【windows-sysinternals.png】windows实用工具
http://technet.microsoft.com/en-US/sysinternals/bb896653（英文网页可以下载）
http://technet.microsoft.com/zh-cn/sysinternals/bb795533(中文网页下载不了)
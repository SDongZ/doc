<?xml version='1.0' encoding="utf-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="zh-CN"
  xmlns:xlink='http://www.w3.org/1999/xlink'>
  <articleinfo>
    <title>MFC常见问题</title>
    <author>
      <firstname>Xiang</firstname>
      <surname>Wang</surname>
    </author>
  </articleinfo>
  <section>
	<title>CEdit的垂直滚动条，自动拉到最下面</title>
	<para>CEdit AutoVScroll  ES_AUTOVSCROLL: Automatically scrolls text up one page when the user presses the ENTER key on the last line.</para>
	<para><programlisting language="c"><![CDATA[	
	Edit.SetSel (0xffff, 0xffff);  //select position after last char in editbox
    Edit.ReplaceSel (clString); // replace selection with new text

void SetSel( 
   DWORD dwSelection,  the starting position in the low-order word and the ending position in the high-order word
   BOOL bNoScroll = FALSE  
); 
void SetSel( 
   int nStartChar, 
   Specifies the starting position. If nStartChar is 0 and nEndChar is –1, all the text in the edit control is selected. 
   If nStartChar is –1, any current selection is removed
   
   int nEndChar, 
   BOOL bNoScroll = FALSE 
   If FALSE, the caret is scrolled into view. If TRUE, the caret is not scrolled into view   
);

void LineScroll( 
   int nLines, 
   int nChars = 0  
);

void CFoo::AppendTextToEditCtrl(CEdit& edit, LPCTSTR pszText)
{
   // get the initial text length
   int nLength = edit.GetWindowTextLength();
   // put the selection at the end of text
   edit.SetSel(nLength, nLength);           移动光标位置，移到0，就可在编辑框的前头加入行了
   // replace the selection
   edit.ReplaceSel(pszText);   If there is no current selection, the replacement text is inserted at the current cursor location.
}
]]></programlisting></para>
  </section>
  <section><title>MessageBox Flags</title><programlisting language="c++"><![CDATA[
  /*
 * MessageBox() Flags
 */
#define MB_OK                       0x00000000L
#define MB_OKCANCEL                 0x00000001L
#define MB_ABORTRETRYIGNORE         0x00000002L
#define MB_YESNOCANCEL              0x00000003L
#define MB_YESNO                    0x00000004L
#define MB_RETRYCANCEL              0x00000005L
#if(WINVER >= 0x0500)
#define MB_CANCELTRYCONTINUE        0x00000006L
#endif /* WINVER >= 0x0500 */


#define MB_ICONHAND                 0x00000010L
#define MB_ICONQUESTION             0x00000020L
#define MB_ICONEXCLAMATION          0x00000030L
#define MB_ICONASTERISK             0x00000040L

#if(WINVER >= 0x0400)
#define MB_USERICON                 0x00000080L
#define MB_ICONWARNING              MB_ICONEXCLAMATION
#define MB_ICONERROR                MB_ICONHAND
#endif /* WINVER >= 0x0400 */

#define MB_ICONINFORMATION          MB_ICONASTERISK
#define MB_ICONSTOP                 MB_ICONHAND

#define MB_DEFBUTTON1               0x00000000L
#define MB_DEFBUTTON2               0x00000100L
#define MB_DEFBUTTON3               0x00000200L
#if(WINVER >= 0x0400)
#define MB_DEFBUTTON4               0x00000300L
#endif /* WINVER >= 0x0400 */

#define MB_APPLMODAL                0x00000000L
#define MB_SYSTEMMODAL              0x00001000L
#define MB_TASKMODAL                0x00002000L
#if(WINVER >= 0x0400)
#define MB_HELP                     0x00004000L // Help Button
#endif /* WINVER >= 0x0400 */

#define MB_NOFOCUS                  0x00008000L
#define MB_SETFOREGROUND            0x00010000L
#define MB_DEFAULT_DESKTOP_ONLY     0x00020000L

#if(WINVER >= 0x0400)
#define MB_TOPMOST                  0x00040000L
#define MB_RIGHT                    0x00080000L
#define MB_RTLREADING               0x00100000L

#endif /* WINVER >= 0x0400 */

#ifdef _WIN32_WINNT
#if (_WIN32_WINNT >= 0x0400)
#define MB_SERVICE_NOTIFICATION          0x00200000L
#else
#define MB_SERVICE_NOTIFICATION          0x00040000L
#endif
#define MB_SERVICE_NOTIFICATION_NT3X     0x00040000L
#endif

#define MB_TYPEMASK                 0x0000000FL
#define MB_ICONMASK                 0x000000F0L
#define MB_DEFMASK                  0x00000F00L
#define MB_MODEMASK                 0x00003000L
#define MB_MISCMASK                 0x0000C000L
  ]]></programlisting></section>
  <section><title>GetStockObject: Stock Logical Objects</title><para>The GetStockObject function retrieves a handle to one of the stock pens, brushes, fonts, or palettes.</para><programlisting><![CDATA[
/* Stock Logical Objects */
#define WHITE_BRUSH         0
#define LTGRAY_BRUSH        1
#define GRAY_BRUSH          2
#define DKGRAY_BRUSH        3
#define BLACK_BRUSH         4
#define NULL_BRUSH          5
#define HOLLOW_BRUSH        NULL_BRUSH
#define WHITE_PEN           6
#define BLACK_PEN           7
#define NULL_PEN            8
#define OEM_FIXED_FONT      10
#define ANSI_FIXED_FONT     11
#define ANSI_VAR_FONT       12
#define SYSTEM_FONT         13
#define DEVICE_DEFAULT_FONT 14
#define DEFAULT_PALETTE     15   Default palette. This palette consists of the static colors in the system palette.
#define SYSTEM_FIXED_FONT   16

#if(WINVER >= 0x0400)
#define DEFAULT_GUI_FONT    17
#endif /* WINVER >= 0x0400 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN2K)
#define DC_BRUSH            18
#define DC_PEN              19
#endif

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN2K)
#define STOCK_LAST          19
#elif (WINVER >= 0x0400)
#define STOCK_LAST          17
#else
#define STOCK_LAST          16
#endif

#define CLR_INVALID     0xFFFFFFFF
  ]]></programlisting></section>
  <section><title>How to get size and location of a control placed on a dialog in MFC</title><programlisting><![CDATA[
CRect rect;
CWnd *pWnd = pDlg->GetDlgItem(YOUR_CONTROL_ID);
pWnd->GetWindowRect(&rect); 注意与GetClientRect(不含边框和标题栏)的区别
pDlg->ScreenToClient(&rect); //optional step - see below

//position:  rect.left, rect.top
//size: rect.Width(), rect.Height()
GetWindowRect gives the screen coordinates of the control. pDlg->ScreenToClient will then convert them be relative to the dialog's client area, which is usually what you need.

Note: pDlg above is the dialog. If you're in a member function of the dialog class, just remove the pDlg->.
  ]]></programlisting></section>
  <section><title>CButton  bitmap icon</title><para>CButton  bitmap icon BM_SETIMAGE message Associates a new image (icon or bitmap) with the button.</para>
Parameters
<table><tgroup cols="2"><tbody>
<row><entry>wParam</entry><entry>The type of image to associate with the button. This parameter can be one of the following values:IMAGE_BITMAP IMAGE_ICON</entry></row><row><entry>lParam</entry><entry>A handle (HICON or HBITMAP) to the image to associate with the button.</entry></row></tbody></tgroup></table>
<para>The appearance of text, an icon, or both on a button control depends on the BS_ICON and BS_BITMAP styles, and whether the BM_SETIMAGE message is called. The possible results are as follows:</para>
<table><tgroup cols="3"><tbody><row><entry>BS_ICON or BS_BITMAP Set?</entry><entry>BM_SETIMAGE Called?</entry><entry>Result</entry></row>
<row><entry>Yes</entry><entry>Yes</entry><entry>Show icon only.</entry></row>
<row><entry>No</entry><entry>Yes</entry><entry>Show icon and text.</entry></row>
<row><entry>Yes</entry><entry>No</entry><entry>Show text only.</entry></row>
<row><entry>No</entry><entry>No</entry><entry>Show text only</entry></row></tbody></tgroup></table>
</section>
</article>

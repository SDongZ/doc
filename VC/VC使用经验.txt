
---------------------------------------------------------------------------
异常调试
---------------------------------------------------------------------------
【vc-exceptions.png  vc-exceptions2.png】
GhDirect.exe 中的 0x52676f5c (DuiLib.dll) 处最可能的异常: 0xC0000005: 读取位置 0xfeeefeee 时发生访问冲突
GhDirect.exe 中的 0x5266a6a7 (DuiLib.dll) 处最可能的异常: 0xC0000005: 读取位置 0xfeeefefa 时发生访问冲突
GhDirect.exe 中的 0x5266a6a7 (DuiLib.dll) 处有未经处理的异常: 0xC0000005: 读取位置 0xfeeefefa 时发生访问冲突
GhDirect.exe 中的 0x5266a6a7 (DuiLib.dll) 处最可能的异常: 0xC0000005: 读取位置 0xfeeefefa 时发生访问冲突
GhDirect.exe 中的 0x5266a6a7 (DuiLib.dll) 处有未经处理的异常: 0xC0000005: 读取位置 0xfeeefefa 时发生访问冲突

http://blog.csdn.net/jidanit/article/details/2660098
归根结底是内存分配的问题，如果不分配内存，就会导致访问冲突
---------------------------------------------------------------------------
xcopy /e /c /y inc $(SolutionDir)..\..\include\CommonLib\   (后面那个反斜杠，必须要有，否则会出错)
【xcopy-vc-error.png】
---------------------------------------------------------------------------
fatal error C1083: 无法打开预编译头文件:“Release\SystemRestoreTray.pch”: No such file or directory
今天 碰到的情况是：（不小心从工程中删除了stdafx.cpp, 再重新加入工程，就出这个问题了）
stdafx.cpp    设置成了使用预编译头文件  改为 生成预编译头文件就可以了
---------------------------------------------------------------------------
1>cl : 命令行 warning D9028: 最小重新生成失败，正在转换为标准生成
1>  stdafx.cpp
1>d:\project\trunk\src\commonlib\commonlib\stdafx.cpp : fatal error C1033: 无法打开程序数据库“d:\project\trunk\src\commonlib\commonlib\debug\vc100.idb”
1>
正在调试另外一个程序，造成这种情况。
---------------------------------------------------------------------------
高版本VC++包括了SDK所有的头文件、帮助、示例和工具，不需要再安装SDK，低版本如VC++5.0则需要安装SDK
---------------------------------------------------------------------------
#pragma warning (disable : 4996)
#pragma comment(lib, "xxx")
---------------------------------------------------------------------------
VC使用CRT调试功能来检测内存泄漏【vc-crt-memory-leak.png】

抽象类 未加  虚析构函数  有可能产生内在泄漏。且很严重。
http://www.pconline.com.cn/pcedu/empolder/gj/vc/0506/648575.html
{2450} normal block at 0x0A040040, 3110400 bytes long.
 Data: <                > 99 8D 8C 8B 8B 8B 8C 8B 8C 8C 8D 8C 8D 8E 8E 8E
_CrtDumpMemoryLeaks(); 函数，在VC output窗口中输出内存泄漏信息。
_CrtSetDbgFlag ( _CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF );这条语句无论程序在什么地方退出都会自动调用 _CrtDumpMemoryLeaks
_CrtSetReportMode( _CRT_ERROR, _CRTDBG_MODE_DEBUG )
花括弧内的数字是内存分配序号，本文例子中是 {45}，{44}，{43}；
内存块的类型，常用的有三种：normal（普通）、client（客户端）或 CRT（运行时）；本文例子中是：normal block；
http://www.vckbase.com/index.php/wv/1071.html
检测内存泄漏的基本工具是调试器和 CRT 调试堆函数。为了使用调试堆函数，必须在要检测内存泄漏和调试的程序中添加下面的语句
http://mikedoszhang.blogspot.com/2011/10/msvcr100ddllcrtbreakalloc-cxx0017.html

(int*){,,msvcr100d.dll}__crtBreakAlloc
Two underlines between the "}" and crtBreakAlloc, rather than only one.
Please use this!
Then we can set the number in the child of it.
用十六进制格式表示的内存位置，如：at 0x00441BA0 等
以字节为单位表示的内存块的大小，如：32 bytes long
前 16 字节的内容（也是用十六进制格式表示），如：Data: 41 42 等
#define _CRTDBG_MAP_ALLOC
如果定义了 _CRTDBG_MAP_ALLOC ，那么在内存分配序号前面还会显示在其中分配泄漏内存的文件名，以及文件名后括号中的数字表示发生泄漏的代码行号
memory check error at 0x008B8B00 = 0x8F, should be 0xFD.
看到网上有人说内存泄露，可以查看0x008B8B00这一地址所对应的变量，问达人怎么找到对应的变量？谢谢啦
1.normal block（普通块）：这是由你的程序分配的内存。
2.client block（客户块）：这是一种特殊类型的内存块，专门用于 MFC 程序中需要析构函数的对象。MFC new 操作符视具体情况既可以为所创建的对象建立普通块，也可以为之建立客户块。
3.CRT block（CRT 块）：是由 C RunTime Library 供自己使用而分配的内存块。由 CRT 库自己来管理这些内存的分配与释放，我们一般不会在内存泄漏报告中发现 CRT 内存泄漏，除非程序发生了严重的错误（例如 CRT 库崩溃）
 1.free block（空闲块）：已经被释放(free)的内存块。
 2.Ignore block（忽略块）：这是程序员显式声明过不要在内存泄漏报告中出现的内存块
---------------------------------------------------------------------------
怎么根据地址找到对应的变量
Variable Name from Memory address in Visual Studio 2008

How found by the memory address mapping variable name workaro
---------------------------------------------------------------------------

正在创建“Debug\IconService.unsuccessfulbuild”，因为已指定“AlwaysCreate”
 正在对“Debug\IconService.lastbuildstate”执行 Touch 任务
http://stackoverflow.com/questions/6054066/vs2010-project-is-not-up-to-date-because-alwayscreate-was-specified
总结： ( 我碰到的情况是，莫明其妙的 多了个 文件 ：recv.ico)
1、用vc打开工程
2、逐个双击左列Solution Explorer中的文件列表，如果有文件不存在，就会有一个警告对话框弹出：

3、工程中移除该文件或者硬盘中添加该文件即可！
---------------------------------------------------------------------------
machineInfo.machine_ip = s2ws( inet_ntoa (*(struct in_addr *)(&pReqInfo->m_ip)) );
error C3859: 超过了 PCH 的虚拟内存范围；请使用“-Zm112”或更大的命令行选项重新编译
fatal error C1076: 编译器限制 : 达到内部堆限制；使用 /Zm 指定更高的限制
1. 找到 工程->属性->c/c++->命令行->其他选项
2. 输入/Zm100，其中后面的数字可以更大

错误3 error C3859: 超过了 PCH 的虚拟内存范围；请使用“-Zm120”

在工程上单击右键，属性，C/C++，最后一项，命令行，在里面/Zm200或者编译器提示的大小解决.
---------------------------------------------------------------------------
VC调试时如何查看函数返回值

所谓C/C++函数调用规范，是指进行一次函数调用所采用的传递参数的方法，返回值的处理以及调用堆栈的清理。
VC++集成调试环境中提供了如下三种调用规范，它们的参数入栈方式都是自右向左的，32位整型的返回值的处理也都是将返回值放到寄存器eax中，如果返回值是64位整型的，就用edx:eax。浮点返回值则放在浮点寄存器ST(0)中。这三种调用规范的区别主要在是函数堆栈的处理上。
_cdecl：由调用者进行堆栈清理。优点是可以实现变参函数。缺点是每一次函数调用，调用者都要额外执行一条进行堆栈清理的代码，程序文件偏大一些。
_stdcall：被调用者自己清理函数所用堆栈。优点是调用者无须清理堆栈了，程序文件会小一些。缺点是无法实现变参函数。（所谓变参函数，即类似与printf之类的函数）。
_fastcall：它与_stdcall的仅有的区别是函数的前两个参数由寄存器ecx，edx传递，CPU寄存器的读写速度是最快的，所以其效率比上面两种高！windows的内核广泛采用了这种调用规范。
注意：调用者与被调用者所采用的调用规范必须得一致，否则有可能会出现莫名其妙的错误。也就是说，如果你的被调用的函数是_stdcall格式的，那么调用者也必须是_stdcall格式。为了让代码更标准，在其他类型的C++编译器也能够运行，还是将微软的APIENTRY改成_stdcall吧。
Visual C++.net 2003中可以对整个项目或者项目中的某些文件设置C/C++默认调用规范，VC++编译器的默认设置是_cdecl的。如果你要修改该默认值，可以在项目属性中进行设置（自个在项目属性对话框中找去吧，现在用Linux，没有VC了，无法抓图
---------------------------------------------------------------------------
VC 中的函数  
Also these are only defined for unsigned values they work for signed integers as well
unsigned short _byteswap_ushort(unsigned short value);
unsigned long _byteswap_ulong(unsigned long value);
unsigned __int64 _byteswap_uint64(unsigned __int64 value);

http://forums.codeguru.com/showthread.php?292902-C-General-How-do-I-convert-between-big-endian-and-little-endian-values
inline void endian_swap(unsigned short& x)
{
   x = (x>>8) | 
       (x<<8);
}

inline void endian_swap(unsigned int& x)
{
   x = (x>>24) | 
       ((x<<8) & 0x00FF0000) |
       ((x>>8) & 0x0000FF00) |
       (x<<24);
}

// __int64 for MSVC, "long long" for gcc
inline void endian_swap(unsigned __int64& x)
{
   x = (x>>56) | 
       ((x<<40) & 0x00FF000000000000) |
       ((x<<24) & 0x0000FF0000000000) |
       ((x<<8)  & 0x000000FF00000000) |
       ((x>>8)  & 0x00000000FF000000) |
       ((x>>24) & 0x0000000000FF0000) |
       ((x>>40) & 0x000000000000FF00) |
       (x<<56);
}
http://stackoverflow.com/questions/7505388/inline-ntohs-ntohl-in-c-boost-asio
uint32_t asm_ntohl(uint32_t a)
{
  __asm
   {
      mov eax, a;
      bswap eax; 
   }
}
BSWAP是汇编指令
指令作用是：32位寄存器内的字节次序变反。
比如：(EAX)=9668 8368H，执行指令：
BSWAP EAX ，则(EAX)=6883 6896H。
---------------------------------------------------------------------------
相同的代码（SVN同步的），一台机器上能编译过，一台机器编辑不过，都是VC2010。
IWICImagingFactory *img_factory = nullptr;
	IWICBitmapDecoder *bmp_decoder = nullptr;
	IWICBitmapFrameDecode *frame_decode = nullptr;
	IWICFormatConverter *format_converter = nullptr;
最后发布是，正常的机器，打了SP1包。出错的机器未打VC2010-SP1包。




wxcplusplus@live.com   下载 vc 2013
https://wxcplusplus.visualstudio.com/  visual studio 账户  (在线版本) (Y) (可保存私有代码)
每个 Visual Studio Online 帐户都可支持 5 个免费 Basic 用户，并包含用于生成和负载测试的月度共享资源


Visual Studio 2010: chrono header file missing
VS2010 only has partial C++11 support. You need VS2012+.

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
有两个不同版本的 DEFINE_GUID 宏。一个版本只是声明对符号名称的外部引用。另一个版本实际上初始化 GUID 的值的符号名称
注意DEFINE_GUID 宏 guiddef.h 头文件中的声明一个 GUID。若要同时定义 GUID，包括 INITGUID。H 头文件，可在其中定义 GUID 的源文件中。
您可以确保您 GUID 中两种方法之一获取初始化：
如果您使用预编译的头文件，包含 INITGUID。H 头文件中定义应初始化的实现文件中的 GUID 之前。（MFC 应用程序向导生成的项目使用预编译的头，默认情况。
如果您未使用预编译的头，其中包括 OBJBASE 之前，定义 INITGUID。H.(OBJBASE。OLE2 包含 H。H.）
#include <InitGuid.h>
---------------------------------------------------------------------------
COM中不能直接使用数组，所以经常使用到SAFEARRAY与VARIANT的转换
---------------------------------------------------------------------------
http://www.ypass.net/blog/2010/01/pcm-audio-part-3-basic-audio-effects-volume-control/
The other catch is that volume as perceived by humans (measured in decibels) is logarithmic(对数的,指数级增长), not linear. Your first instinct would be to think "Well if I wanted to double the volume, I should just multiply the samples by 2." Unfortunately, it's not quite that easy.
#include <MMDeviceAPI.h>
        IMMDeviceEnumerator *  device_enumerator = NULL;
        HRESULT hr = CoCreateInstance( __uuidof( MMDeviceEnumerator ), NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS( &device_enumerator ) );
DeviceRole 设备角色
ERole constant
Device role
Rendering examples
Capture examples
eConsole
Interaction with the computer
Games and system notifications
Voice commands
eCommunications
Voice communications with another person
Chat and VoIP
Chat and VoIP
eMultimedia
Playing or recording audio content
Music and movies
Narration and live music recording
In the current implementation of the MMDevice API, the only device resources that this interface can enumerate are audio endpoint devices
IMMDeviceEnumerator 注册，通知，接口，截取所有的声音设备事件。
插入: plug-in
 the endpoint device is not plugged into the jack
枚举声音设备： 筛选
DEVICE_STATE_ACTIVE
0x00000001
The audio endpoint device is active. That is, the audio adapter that connects to the endpoint device is present and enabled. In addition, if the endpoint device plugs into a jack on the adapter, then the endpoint device is plugged in.
DEVICE_STATE_DISABLED
0x00000002
The audio endpoint device is disabled. The user has disabled the device in the Windows multimedia control panel, Mmsys.cpl. For more information, see Remarks.
DEVICE_STATE_NOTPRESENT
0x00000004
The audio endpoint device is not present because the audio adapter that connects to the endpoint device has been removed from the system, or the user has disabled the adapter device in Device Manager.
DEVICE_STATE_UNPLUGGED
0x00000008
The audio endpoint device is unplugged. The audio adapter that contains the jack for the endpoint device is present and enabled, but the endpoint device is not plugged into the jack. Only a device with jack-presence detection can be in this state. For more information about jack-presence detection, see Audio Endpoint Devices.
DEVICE_STATEMASK_ALL
0x0000000F
Includes audio endpoint devices in all states―active, disabled, not present, and unplugged.
RegisterEndpointNotificationCallback（IMMNotificationClient *pNotify）
HRESULT OnDeviceStateChanged(
 [in]  LPCWSTR pwstrDeviceId,
 [in]  DWORD dwNewState  
);
The IMMNotificationClient interface provides notifications when an audio endpoint device is added or removed, when the state or properties of an endpoint device change, or when there is a change in the default role assigned to an endpoint device. Unlike the other interfaces in this section, which are implemented by the MMDevice API system component, an MMDevice API client implements the IMMNotificationClient interface. To receive notifications, the client passes a pointer to itsIMMNotificationClient interface instance as a parameter to the IMMDeviceEnumerator::RegisterEndpointNotificationCallback method.
http://wenku.baidu.com/view/2fc0c36d25c52cc58bd6bec7.html
http://wenku.baidu.com/view/2fc0c36d25c52cc58bd6bec7.html
---------------------------------------------------------------------------
COM  
WINOLEAPI PropVariantClear(
 _In_  PROPVARIANT *pvar
);
IPropertyStore * property_store = NULL;
PROPVARIANT varString;
property_store->GetValue( PKEY_Device_FriendlyName, &varString );
HANDLE ev = CreateEventEx(NULL, NULL, 0, EVENT_MODIFY_STATE | SYNCHRONIZE);
WAVEFORMATEX * wav = NULL;
m_audio_client->GetMixFormat( &wav );
// 注意，可以自定义采集的（不是录制的）声音格式
                        wav->wFormatTag = WAVE_FORMAT_PCM;
                        wav->nChannels = 2;
                        wav->wBitsPerSample =16;
                        wav->nBlockAlign = wav->wBitsPerSample / 8 * wav->nChannels;
                        wav->nAvgBytesPerSec = wav->nBlockAlign * wav->nSamplesPerSec;
                        wav->cbSize = 0;
m_audio_client->Initialize( AUDCLNT_SHAREMODE_SHARED, AUDCLNT_STREAMFLAGS_EVENTCALLBACK | AUDCLNT_STREAMFLAGS_NOPERSIST, 20 * 10000, 0, wav, NULL);        
必须在 audio_client初始化后，才能调用。        
hr = m_audio_client->GetService( IID_PPV_ARGS( &m_audio_capture_client ) );
m_audio_client->SetEventHandle( ev );
---------------------------------------------------------------------------
#include <windowsx.h>
#define     GetWindowOwner(hwnd)    GetWindow(hwnd, GW_OWNER)
http://www.dreamincode.net/forums/topic/286954-using-windowsxh-for-better-code-organization-and-message-cracking/
<windowsx.h> contains lots of really useful macros for straight Win32 programming.
The WINDOWS.H and WINDOWSX.H header files provide the following features:
New data types and their associated definitions
A preprocessor variable, STRICT, which enforces the strictest possible type checking by the compiler
Macros to simplify many common operations in Windows programming
Control macros to simplify communication with Windows controls
Message crackers (which are a convenient, portable, and type-safe method to handle messages) and their associated parameters and return values in the Windows environment
无窗口模式 （windowless）
http://blogs.msdn.com/b/oldnewthing/archive/2005/02/11/371042.aspx
DrawFrameControl & DrawThemeBackground

MFC的CHTMLView和CDHTMLDialog，以及Windows Forms的WebBrowser类
http://visualstudiogallery.msdn.microsoft.com/1B69C9FE-E422-4799-9EB5-6AC7034C52E1/
DirectUI is a gui library to make win32 gui development more easy, It has the similar principle with the Microsoft "DirectUIHWND", and it uses xml and script to configure ui
---------------------------------------------------------------------------
【 COM-Error-Codes.png】
http://msdn.microsoft.com/zh-cn/library/vstudio/ms690088.aspx 
http://en.wikipedia.org/wiki/HRESULT#HRESULT_format
Structure of COM Error Codes
The following illustration shows the format of an HRESULT or SCODE; the numbers indicate bit position

An HRESULT value has 32 bits divided into three fields: a severity code, a facility code, and an error code.
GetLastError
http://support.microsoft.com/kb/169505/zh-cn
        if(!m_pptApp.CreateDispatch(_T("Powerpoint.Application")))
        {
                MessageBox(NULL,_T("error"),_T("Couldn't start PowerPoint."),0);
                return;
        }
http://stackoverflow.com/questions/7008047/is-there-a-way-to-get-the-string-representation-of-hresult-value-using-win-api
_com_error err(hr);
LPCTSTR errMsg = err.ErrorMessage();
http://stackoverflow.com/questions/455434/how-should-i-use-formatmessage-properly-in-c
http://msdn.microsoft.com/en-us/library/0ye3k36s(v=vs.100).aspx    _com_error Class  comdef.h
HRESULT 转成十六进制代码串 ？
                err_str.Format( L"[Couldn't start PowerPoint][SCODE:%02X%02X%02X%02X]%s",
                                    pe->m_sc >> 24 & 0xff, pe->m_sc >> 16 & 0xff,
                                    pe->m_sc >> 8 & 0xff, pe->m_sc & 0xff,
                                                err.ErrorMessage() );
http://support.microsoft.com/kb/256348/en-us
How to obtain error message descriptions using the FormatMessage API
---------------------------------------------------------------------------
BOOL CreateDispatch(
  LPCTSTR lpszProgID,
  COleException* pError = NULL 
);
一个COleException对象代表的是与一个OLE操作相关的异常情况。此COleException类包括一个公用数据成员，该成员包含了用来表明此异常的原因的状态代码
class COleException : public CException
CException::GetErrorMessage
OLE异常
COleException* pe = new COleException;
pe->m_sc   是个 hresult值
pe->Delete();
---------------------------------------------------------------------------
template <class T> void SafeRelease(T **ppT)
{
    if (*ppT)
    {
        (*ppT)->Release();
        *ppT = NULL;
    }
}



//
// Generic test for success on any status value (non-negative numbers
// indicate success).
//

#define SUCCEEDED(hr) (((HRESULT)(hr)) >= 0)

//
// and the inverse
//

#define FAILED(hr) (((HRESULT)(hr)) < 0)




CComPtr的用法和普通COM指针几乎一样，另外使用中有以下几点需要注意。
1. CComPtr已经保证了AddRef和Release的正确调用，所以不需要，也不能够再调用AddRef和Release。
2. 如果要释放一个智能指针，直接给它赋NULL值即可。
3. CComPtr本身析构的时候会释放COM指针。
4. 当对CComPtr使用&运算符（取指针地址）的时候，要确保CComPtr为NUL。（因为通过CComPtr的地址对CComPtr赋值时，不会自动调用AddRef，若不为NULL，则前面的指针不能释放，CComPtr会使用assert报警）
以刚才的程序为例：
void SomeApp( IHello * pHello )
{
CComPtr<IHello> pCopy = pHello;
OtherApp();
pCopy->Hello();
}
由于pCopy是一个局部的对象，所以即使OtherApp()抛出异常，pCopy也会被析构，指针能够被释放。
如果不想在程序临近发布前，还因为COM指针的引用计数造成崩溃的话，就牢记这一点吧：程序中除了参数之外，不要直接使用COM指针类型，一定要全部以CComPtr<IXXX>代替










Interface definition file 是一个接口文件，它应该由用户利用IDL(interface definition language)语言编辑uuidgen产生的IDL原型文件而成。IDL是一种用来说明操作（过程或函数），操作的参数以及数据类型的语言，它在语法上继承于C语言，但形式上和C语言有很多不同，当然也有一些符合自己特点的适合于分布计算的特殊语法。具体可参看DCE RPC specification中的IDL language specification部分 (idl.jpg)

IDL文件可以定义C和C++风格的结构，并可用它们作为函数的参数。 当IDL文件中有一个library时，MIDL将生成一个类型库
http://www.vckbase.com/index.php/wv/1218
COM 在设计初期，就定了一个目标：要能实现跨语言的调用。既然是跨语言的，那么组件的接口描述就必须在任何语言环境中都要能够认识。怎么办？用 .h 文件描述？------ C语言程序员笑了，真方便！BASIC 程序员哭了:-( 因此，微软使用了一个新的文件格式---IDL文件（接口定义描述语言）。IDL 是一个文本文件，它的语言语法比较简单，很象C。具体 IDL 文件的讲解，见下一回《COM 组件设计与应用（八）之添加新接口》。IDL 经过编译，生成二进制的等价类型库文件 TLB 提供给其它语言来使用。图三示意了 ATL COM 程序编译的过程
idl2-ATL 组件程序编译过程.jpg
说明1：编译后，类型库以 TLB 文件形式单独存在，同时也保存在目标文件的资源中。因此，我们将来在 #import 引入类型库的时候，既可以指定 TLB 文件，也可以指定目标文件；
说明2：我们作为 C/C++ 的程序员，还算是比较幸福的。因为 IDL 编译后，特意为我们提供了 C 语言形式的接口文件。
说明3：IDL 编译后生成代理/存根源程序，有：dlldata.c、xxx_p.c、xxxps.def、xxxps.mak，我们可以用 NMAKE.EXE 再次编译来产生真正的代理/存根DLL目标文件(注1)

idl文件转换成.h文件，你可以使用midl命令生成  idl-midl-h.gif
将idl文件加入到工程项目中，然后右键属性在output中生成文件即可









IWebBrowser2
http://msdn.microsoft.com/en-us/library/aa752038(v=vs.85).aspx
Windows Internet Explorer's components can easily be reused thanks to its Component Object Model (COM)-based architecture. 
Two commonly used components are shdocvw.dll (the WebBrowser Control) and mshtml.dll (code-named "Trident").

BEGIN_EVENTSINK_MAP(CWebPageDlg, CDialogEx)
	ON_EVENT(CWebPageDlg, IDC_EXPLORER1, 259, CWebPageDlg::DocumentCompleteExplorer1, VTS_DISPATCH VTS_PVARIANT)
END_EVENTSINK_MAP()

Defines an OLE automation function in a dispatch map
DISP_FUNCTION(theClass, pszName, pfnMember, vtRetVal, vtsParams )

BEGIN_DISPATCH_MAP(CFixHtmlView, CHtmlView)
	DISP_FUNCTION(CFixHtmlView, "ParentLogin", ParentLogin, VT_BOOL, VTS_I4 VTS_I4)
	DISP_FUNCTION(CFixHtmlView, "ChildFinish", ChildFinish, VT_I4, VTS_I4 VTS_I4 VTS_BSTR)
	DISP_FUNCTION(CFixHtmlView, "ParentReg",ParentReg,VT_BOOL,VTS_I4 VTS_BSTR VTS_BSTR)
	DISP_FUNCTION(CFixHtmlView, "sessionOverTime",sessionOverTime,VT_I4, VTS_I4 VTS_I4)
	DISP_FUNCTION(CFixHtmlView, "eyeOver",eyeOver, VT_BOOL, VTS_I4 VTS_I4)
END_DISPATCH_MAP()
<input type="button" onClick="send_result('123')" />
<script text="text/javascript">
function send_result(str){
	window.external.eyeOver(0,0);
}
</script>